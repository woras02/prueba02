ssh-keygen -t ed25519 -C "tygos73@gmail.com" /rsa-b 4096  / ssh clave
 
ctl + l  = limpiar git
 git config --help
            --global

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generar una nueva llave SSH: (Cualquier sistema operativo)

Comprobar proceso y agregarlo (Windows)

eval $(ssh-agent -s) // verificar si esta activo

ssh-add ~/.ssh/id_rsa // para activar la clave
cd ~/.ssh/

Comprobar proceso y agregarlo (Mac)

eval "$(ssh-agent -s)"


------------------
git pull origin main // traer todo que este github
git remote set-url origin // para cambiar origin git@github.com:woras02/prueba02.git
git config -l para ver la congifuracion
git pull --rebase origin master
git remote --verbose
git remote add origin git@github.com:woras02/prueba.git -- ejemplo
git remote set -url origin git@github.com:woras02/prueba.git -- por si esta ligado en otro repositorio
git fetch origin main:tmp
git update-git-for-windows -y // ver la version de windows
git add .     agregar todos los archivoz de esa carperta
git commit -m  agregar texto
git commit -am  agregar todo los cambios solo cambios
git checkout   borrar cambios
git rm  para quitarlo cuando lo agadimos
checkout -f borrar todos los cambios 
git show
cat para ver el contenido
git log para ver todos los cambios , historial
git reset --hard para cambiar de version " peligroso pero comun "
git reset --soft cambio de version no tan peligroso limitado
ls para ver todo
ls -al para ver todos mejor
git log --stat cambios exatacto que has echo
git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo tx
